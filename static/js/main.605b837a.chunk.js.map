{"version":3,"sources":["redux/actionTypes.js","components/Fallback.js","containers/common/Messages.js","components/Messages.js","App.js","serviceWorker.js","index.js","redux/reducers/initialState.js","redux/reducers/insurers.js","redux/reducers/index.js","redux/reducers/clients.js","redux/reducers/policies.js","redux/reducers/vehicles.js","redux/reducers/errors.js","redux/reducers/success.js","redux/reducers/auth.js","redux/store.js","redux/actions/index.js"],"names":["ADD_CLIENT","UPDATE_CLIENTS","ADD_INSURER","ADD_ERROR","SHIFT_ERROR","ADD_SUCCESS","SHIFT_SUCCESS","UPDATE_INSURERS","ADD_POLICY","UPDATE_POLICY","UPDATE_POLICIES","ADD_VEHICLE","LOGIN","LOGOUT","Fallback","className","style","height","display","justifyContent","alignItems","src","alt","margin","borderRadius","width","connect","state","errors","success","dispatch","removeError","shiftError","removeSuccess","shiftSuccess","useEffect","length","message","error","Main","React","lazy","Login","ChangePassword","PUBLIC_URL","process","console","log","App","useRouteMatch","fallback","path","to","Boolean","window","location","hostname","match","ReactDOM","render","store","StrictMode","document","getElementById","addEventListener","auth","getState","token","rememberMe","localStorage","setItem","JSON","stringify","clear","navigator","serviceWorker","ready","then","registration","unregister","catch","localData","parse","getItem","initialState","clients","insurers","policies","vehicles","nonDuplicates","oldList","newList","filter","o","findIndex","n","id","combineReducers","action","type","payload","rest","createStore","rootReducer","addClient","client","updateClients","addInsurer","insurer","addPolicy","policy","addVehicle","vehicle","updatePolicy","updatePolicies","updateInsurers","addError","addSuccess","login","user","logout"],"mappings":"0HAAA,4dAAO,IAAMA,EAAa,gBACbC,EAAiB,iBACjBC,EAAc,eACdC,EAAY,YACZC,EAAc,cACdC,EAAc,cACdC,EAAgB,gBAChBC,EAAkB,kBAClBC,EAAa,aACbC,EAAgB,gBAChBC,EAAkB,kBAClBC,EAAc,cACdC,EAAQ,QACRC,EAAS,U,gKCXP,SAASC,IACtB,OACE,yBAAKC,UAAU,oBACbC,MAAO,CACLC,OAAQ,QACRC,QAAS,OACTC,eAAgB,SAChBC,WAAY,WAEd,6BACE,yBAAKC,IAAI,oCAAoCC,IAAI,eAC/CN,MAAO,CACLO,OAAQ,SACRL,QAAS,QACTM,aAAc,MACdC,MAAO,Y,+BCFJC,eAVS,SAACC,GAAD,MAAY,CAClCC,OAAQD,EAAMC,OACdC,QAASF,EAAME,YAGU,SAACC,GAAD,MAAe,CACxCC,YAAa,kBAAMD,EAASE,gBAC5BC,cAAe,kBAAMH,EAASI,mBAGjBR,ECZA,YAAmE,IAA/CG,EAA8C,EAA9CA,QAASI,EAAqC,EAArCA,cAAcL,EAAuB,EAAvBA,OAAQG,EAAe,EAAfA,YAWhE,OAVAI,qBAAU,WACJP,EAAOQ,SACTC,EAAA,EAAQC,MAAMV,EAAO,IACrBG,KAEEF,EAAQO,SACVC,EAAA,EAAQR,QAAQA,EAAQ,IACxBI,OAED,CAACL,EAAQC,IAEV,iCCPEU,EAAOC,IAAMC,MAAK,kBAAM,qEACxBC,EAAQF,IAAMC,MAAK,kBAAM,8DACzBE,EAAiBH,IAAMC,MAAK,kBAAM,uDAElCG,EAAaC,oBACnBC,QAAQC,IAAI,aAAcH,GA4BXI,MA1Bf,WAGE,OAFAF,QAAQC,IAAIE,eAGV,kBAAC,IAAD,KACE,kBAAC,WAAD,CAAUC,SAAU,kBAACpC,EAAD,OAClB,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOqC,KAAMP,EAAa,UACxB,kBAACF,EAAD,OAEF,kBAAC,IAAD,CAAOS,KAAMP,EAAa,oBACxB,kBAACD,EAAD,OAEF,kBAAC,IAAD,CAAOQ,KAAMP,EAAa,QACxB,kBAACL,EAAD,OAEF,kBAAC,IAAD,CAAOY,KAAMP,EAAa,KACxB,kBAAC,IAAD,CAAUQ,GAAG,cAInB,kBAAC,EAAD,QCxBcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,YCTNC,IAASC,OACP,kBAAC,IAAD,CAAUC,MAAOA,KACf,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,QAGJC,SAASC,eAAe,SAG1BT,OAAOU,iBAAiB,gBAAgB,WACtC,IACQC,EADQL,IAAMM,WACdD,KACJA,GAAQA,EAAKE,OAASF,EAAKG,WAC7BC,aAAaC,QAAQ,aAAcC,KAAKC,UACtCZ,IAAMM,aAGRG,aAAaI,WAEd,GDuGG,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAA1C,GACLQ,QAAQR,MAAMA,EAAMD,a,0DEzItB4C,EACJV,KAAKW,MAAMb,aAAac,QAAQ,gBAAkB,GAUrCC,EARM,CACnBC,QAASJ,EAAUI,SAAW,GAC9BC,SAAUL,EAAUK,UAAY,GAChCC,SAAUN,EAAUM,UAAY,GAChCC,SAAUP,EAAUO,UAAY,GAChCvB,KAAMgB,EAAUhB,MAAQ,MCLbwB,EAAgB,SAACC,EAASC,GAAV,OAAsBD,EAAQE,QAAO,SAACC,GAEjE,OAAmB,IADLF,EAAQG,WAAU,SAAAC,GAAC,OAAIA,EAAEC,KAAOH,EAAEG,U,oBCMnCC,kBAAgB,CAC7BZ,QCPa,WAAiD,IAAvC1D,EAAsC,uDAA9ByD,EAAaC,QAASa,EAAQ,uCAC7D,OAAQA,EAAOC,MACb,KAAKnG,IACH,MAAM,GAAN,mBACK2B,GADL,CAEEuE,EAAOE,UAEX,KAAKnG,IACH,MAAM,GAAN,mBACKwF,EAAc9D,EAAOuE,EAAOE,UADjC,YAEKF,EAAOE,UAEd,QACE,OAAOzE,IDLX2D,SDJa,WAAiD,IAAxC3D,EAAuC,uDAA/ByD,EAAaE,SAAUY,EAAQ,uCAC7D,OAAQA,EAAOC,MACb,KAAKjG,IACH,MAAM,GAAN,mBACKyB,GADL,CAEEuE,EAAOE,UAEX,KAAK7F,IACH,MAAM,GAAN,mBACKkF,EAAc9D,EAAOuE,EAAOE,UADjC,YAEKF,EAAOE,UAEd,QACE,OAAOzE,ICRX4D,SETa,WAAkD,IAAxC5D,EAAuC,uDAA/ByD,EAAaG,SAAUW,EAAQ,uCAC9D,OAAQA,EAAOC,MACb,KAAK3F,IACH,MAAM,GAAN,mBACKmB,GADL,CAEEuE,EAAOE,UAEX,KAAK3F,IACH,MAAM,CACJyF,EAAOE,SADT,mBAEKX,EAAc9D,EAAO,CAACuE,EAAOE,YAEpC,KAAK1F,IACH,MAAM,GAAN,mBACK+E,EAAc9D,EAAOuE,EAAOE,UADjC,YAEKF,EAAOE,UAEd,QACE,OAAOzE,IFRX6D,SGXa,WAAiD,IAAxC7D,EAAuC,uDAA/ByD,EAAaI,SAAUU,EAAQ,uCAC7D,OAAQA,EAAOC,MACb,KAAKxF,IACH,MAAM,GAAN,mBACKgB,GADL,CAEEuE,EAAOE,UAEX,QACE,OAAOzE,IHIXC,OIZa,WAA4D,IAA5CD,EAA2C,uDAAnCyD,EAAaxD,QAAU,GAAIsE,EAAQ,uCACxE,OAAQA,EAAOC,MACb,KAAKhG,IACH,MAAM,GAAN,mBACKwB,GADL,CAEEuE,EAAOE,UAEX,KAAKhG,IAAL,kBAC4BuB,GAAR0E,GADpB,iBAEE,OAAO,YACFA,GAEP,QACE,OAAO1E,IJAXE,QKba,WAA8D,IAA7CF,EAA4C,uDAApCyD,EAAavD,SAAW,GAAIqE,EAAQ,uCAC1E,OAAQA,EAAOC,MACb,KAAK9F,IACH,MAAM,GAAN,mBACKsB,GADL,CAEEuE,EAAOE,UAEX,KAAK9F,IAAL,kBAC4BqB,GAAR0E,GADpB,iBAEE,OAAO,YACFA,GAEP,QACE,OAAO1E,ILCXsC,KMda,WAAkD,IAApCtC,EAAmC,uDAA3ByD,EAAanB,KAAMiC,EAAQ,uCAC9D,OAAQA,EAAOC,MACb,KAAKvF,IACH,OAAO,eACFsF,EAAOE,SAEd,KAAKvF,IACH,OAAO,KACT,QACE,OAAOc,MCRE2E,gBAAYC,I,gCCJ3B,ueAiBaC,EAAY,SAACC,GAAD,MAAa,CACpCN,KAAMnG,IACNoG,QAASK,IAGEC,EAAgB,SAACrB,GAAD,MAAc,CACzCc,KAAMlG,IACNmG,QAASf,IAGEsB,EAAa,SAACC,GAAD,MAAc,CACtCT,KAAMjG,IACNkG,QAASQ,IAGEC,EAAY,SAACC,GAAD,MAAa,CACpCX,KAAM3F,IACN4F,QAASU,IAGEC,EAAa,SAACC,GAAD,MAAc,CACtCb,KAAMxF,IACNyF,QAASY,IAGEC,EAAe,SAACH,GAAD,MAAa,CACvCX,KAAM1F,IACN2F,QAASU,IAGEI,EAAiB,SAAC3B,GAAD,MAAe,CAC3CY,KAAMzF,IACN0F,QAASb,IAGE4B,EAAiB,SAAC7B,GAAD,MAAe,CAC3Ca,KAAM5F,IACN6F,QAASd,IAGE8B,EAAW,SAAC9E,GAAD,MAAY,CAClC6D,KAAMhG,IACNiG,QAAS9D,IAGEN,EAAa,iBAAO,CAC/BmE,KAAM/F,IACNgG,QAAS,OAGEiB,EAAa,SAACxF,GAAD,MAAc,CACtCsE,KAAM9F,IACN+F,QAASvE,IAGEK,EAAe,iBAAO,CACjCiE,KAAM7F,IACN8F,QAAS,OAGEkB,EAAQ,SAACC,GAAD,MAAW,CAC9BpB,KAAMvF,IACNwF,QAASmB,IAGEC,EAAS,iBAAO,CAC3BrB,KAAMtF,IACNuF,QAAS,Q","file":"static/js/main.605b837a.chunk.js","sourcesContent":["export const ADD_CLIENT = 'ACTION_CLIENT';\nexport const UPDATE_CLIENTS = 'UPDATE_CLIENTS';\nexport const ADD_INSURER = 'ADD_INSURERS';\nexport const ADD_ERROR = 'ADD_ERROR';\nexport const SHIFT_ERROR = 'SHIFT_ERROR';\nexport const ADD_SUCCESS = 'ADD_SUCCESS';\nexport const SHIFT_SUCCESS = 'SHIFT_SUCCESS';\nexport const UPDATE_INSURERS = 'UPDATE_INSURERS';\nexport const ADD_POLICY = 'ADD_POLICY';\nexport const UPDATE_POLICY = 'UPDATE_POLICY';\nexport const UPDATE_POLICIES = 'UPDATE_POLICIES';\nexport const ADD_VEHICLE = 'ADD_VEHICLE';\nexport const LOGIN = 'LOGIN';\nexport const LOGOUT = 'LOGOUT';","import React from 'react'\n\nexport default function Fallback() {\n  return (\n    <div className=\"FallbackContainer\"\n      style={{\n        height: '100vh',\n        display: 'flex',\n        justifyContent: 'center',\n        alignItems: 'center',\n      }}>\n      <div>\n        <img src=\"/orient-insurance/orient-logo.png\" alt=\"Company logo\"\n          style={{\n            margin: '0 auto',\n            display: 'block',\n            borderRadius: '10%',\n            width: '85px',\n          }} />\n      </div>\n    </div>\n  );\n}\n","import { connect } from 'react-redux';\n\nimport Messages from '../../components/Messages';\nimport { shiftError, shiftSuccess } from '../../redux/actions';\n\nconst mapStateToProps = (state) => ({\n  errors: state.errors,\n  success: state.success\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  removeError: () => dispatch(shiftError()),\n  removeSuccess: () => dispatch(shiftSuccess())\n});\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(Messages);","import React, { useEffect } from 'react';\nimport { message } from 'antd';\n\nexport default function Messages({ success, removeSuccess,errors, removeError }) {\n  useEffect(() => {\n    if (errors.length) {\n      message.error(errors[0]);\n      removeError();\n    }\n    if (success.length) {\n      message.success(success[0]);\n      removeSuccess();\n    }\n  }, [errors, success]);\n  return (\n    <div>\n    </div>\n  );\n}","import React, { Suspense } from 'react';\nimport {\n  BrowserRouter as Router, Switch, Route, Redirect, useRouteMatch\n} from 'react-router-dom';\n\nimport './App.css';\nimport Fallback from './components/Fallback';\nimport Messages from './containers/common/Messages';\nconst Main = React.lazy(() => import('./containers/Main'));\nconst Login = React.lazy(() => import('./containers/admins/Login'));\nconst ChangePassword = React.lazy(() => import('./containers/admins/ChangePassword'));\n\nconst PUBLIC_URL = process.env.PUBLIC_URL || \"\";\nconsole.log('PUBLIC URL', PUBLIC_URL);\n\nfunction App() {\n  console.log(useRouteMatch());\n\n  return (\n    <Router>\n      <Suspense fallback={<Fallback />}>\n        <Switch>\n          <Route path={PUBLIC_URL + \"/login\"}>\n            <Login />\n          </Route>\n          <Route path={PUBLIC_URL + \"/change-password\"}>\n            <ChangePassword />\n          </Route>\n          <Route path={PUBLIC_URL + \"/app\"}>\n            <Main />\n          </Route>\n          <Route path={PUBLIC_URL + \"*\"}>\n            <Redirect to=\"`/app`\" />\n          </Route>\n        </Switch>\n      </Suspense>\n      <Messages />\n    </Router>\n  );\n}\n\nexport default App;\n\n/* \nxs\t<576px and also default setting, could be a span value or an object containing above props\tnumber|object\t-\t\nsm\t≥576px, could be a span value or an object containing above props\tnumber|object\t-\t\nmd\t≥768px, could be a span value or an object containing above props\tnumber|object\t-\t\nlg\t≥992px, could be a span value or an object containing above props\tnumber|object\t-\t\nxl\t≥1200px, could be a span value or an object containing above props\tnumber|object\t-\t\nxxl\t≥1600px, could be a span value or an object containing above props\tnumber|object\t-\n */\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\n\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport store from './redux/store';\n\nReactDOM.render(\n  <Provider store={store}>\n    <React.StrictMode>\n      <App />\n    </React.StrictMode>\n  </Provider>,\n  document.getElementById('root')\n);\n\nwindow.addEventListener('beforeunload', () => {\n  const storage = store.getState();\n  const { auth } = storage;\n  if (auth && auth.token && auth.rememberMe) {\n    localStorage.setItem('OrientData', JSON.stringify(\n      store.getState()\n    ));\n  } else {\n    localStorage.clear();\n  }\n}, false);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","const localData = \n  JSON.parse(localStorage.getItem('OrientData')) || {};\n\nconst initialState = {\n  clients: localData.clients || [],\n  insurers: localData.insurers || [],\n  policies: localData.policies || [],\n  vehicles: localData.vehicles || [],\n  auth: localData.auth || null,\n};\n\nexport default initialState;","import { ADD_INSURER, UPDATE_INSURERS } from '../actionTypes';\nimport initialState from './initialState';\n\nexport const nonDuplicates = (oldList, newList) => oldList.filter((o) => {\n  const index = newList.findIndex(n => n.id === o.id);\n  return (index === -1);\n});\n\nexport default function(state = initialState.insurers, action) {\n  switch (action.type) {\n    case ADD_INSURER:\n      return [\n        ...state,\n        action.payload\n      ];\n    case UPDATE_INSURERS:\n      return [\n        ...nonDuplicates(state, action.payload),\n        ...action.payload\n      ];\n    default:\n      return state;\n  }\n};","import { combineReducers } from 'redux';\n\nimport clients from './clients';\nimport insurers from './insurers';\nimport policies from './policies';\nimport vehicles from './vehicles';\nimport errors from './errors';\nimport success from './success';\nimport auth from './auth';\n\nexport default combineReducers({\n  clients,\n  insurers,\n  policies,\n  vehicles,\n  errors,\n  success,\n  auth,\n});\n","import { ADD_CLIENT, UPDATE_CLIENTS } from '../actionTypes';\nimport initialState from './initialState';\nimport { nonDuplicates } from './insurers';\n\nexport default function (state = initialState.clients, action) {\n  switch (action.type) {\n    case ADD_CLIENT:\n      return [\n        ...state,\n        action.payload,\n      ];\n    case UPDATE_CLIENTS:\n      return [\n        ...nonDuplicates(state, action.payload),\n        ...action.payload,\n      ];\n    default:\n      return state;\n  }\n};","import { ADD_POLICY, UPDATE_POLICY, UPDATE_POLICIES } from '../actionTypes';\nimport initialState from './initialState';\nimport { nonDuplicates } from './insurers';\n\nexport default function (state = initialState.policies, action) {\n  switch (action.type) {\n    case ADD_POLICY:\n      return [\n        ...state,\n        action.payload\n      ];\n    case UPDATE_POLICY:\n      return [\n        action.payload,\n        ...nonDuplicates(state, [action.payload]),\n      ];\n    case UPDATE_POLICIES:\n      return [\n        ...nonDuplicates(state, action.payload),\n        ...action.payload\n      ];\n    default:\n      return state;\n  }\n};","import { ADD_VEHICLE } from '../actionTypes';\nimport initialState from './initialState';\n\nexport default function(state = initialState.vehicles, action) {\n  switch (action.type) {\n    case ADD_VEHICLE:\n      return [\n        ...state,\n        action.payload\n      ];\n    default:\n      return state;\n  }\n};","import { ADD_ERROR, SHIFT_ERROR } from '../actionTypes';\nimport initialState from './initialState';\n\nexport default function errors(state = initialState.errors || [], action) {\n  switch (action.type) {\n    case ADD_ERROR:\n      return [\n        ...state,\n        action.payload\n      ];\n    case SHIFT_ERROR:\n      const [_first, ...rest] = state;\n      return [\n        ...rest\n      ];\n    default:\n      return state;\n  }\n};","import { ADD_SUCCESS, SHIFT_SUCCESS } from '../actionTypes';\nimport initialState from './initialState';\n\nexport default function success(state = initialState.success || [], action) {\n  switch (action.type) {\n    case ADD_SUCCESS:\n      return [\n        ...state,\n        action.payload\n      ];\n    case SHIFT_SUCCESS:\n      const [_first, ...rest] = state;\n      return [\n        ...rest\n      ];\n    default:\n      return state;\n  }\n};","import { LOGOUT, LOGIN } from '../actionTypes';\nimport initialState from './initialState';\n\nexport default function auth(state = initialState.auth, action) {\n  switch (action.type) {\n    case LOGIN:\n      return {\n        ...action.payload\n      };\n    case LOGOUT:\n      return null;\n    default:\n      return state;\n  }\n};","import { createStore } from 'redux';\n\nimport rootReducer from './reducers';\n\nexport default createStore(rootReducer);\n","import {\n  ADD_CLIENT,\n  UPDATE_CLIENTS,\n  ADD_INSURER,\n  ADD_POLICY,\n  ADD_VEHICLE,\n  UPDATE_POLICY,\n  UPDATE_INSURERS,\n  ADD_ERROR,\n  SHIFT_ERROR,\n  UPDATE_POLICIES,\n  ADD_SUCCESS,\n  SHIFT_SUCCESS,\n  LOGIN,\n  LOGOUT\n} from '../actionTypes';\n\nexport const addClient = (client) => ({\n  type: ADD_CLIENT,\n  payload: client,\n});\n\nexport const updateClients = (clients) => ({\n  type: UPDATE_CLIENTS,\n  payload: clients,\n});\n\nexport const addInsurer = (insurer) => ({\n  type: ADD_INSURER,\n  payload: insurer,\n});\n\nexport const addPolicy = (policy) => ({\n  type: ADD_POLICY,\n  payload: policy,\n});\n\nexport const addVehicle = (vehicle) => ({\n  type: ADD_VEHICLE,\n  payload: vehicle,\n});\n\nexport const updatePolicy = (policy) => ({\n  type: UPDATE_POLICY,\n  payload: policy,\n});\n\nexport const updatePolicies = (policies) => ({\n  type: UPDATE_POLICIES,\n  payload: policies,\n});\n\nexport const updateInsurers = (insurers) => ({\n  type: UPDATE_INSURERS,\n  payload: insurers,\n});\n\nexport const addError = (error) => ({\n  type: ADD_ERROR,\n  payload: error,\n});\n\nexport const shiftError = () => ({\n  type: SHIFT_ERROR,\n  payload: null,\n});\n\nexport const addSuccess = (success) => ({\n  type: ADD_SUCCESS,\n  payload: success,\n});\n\nexport const shiftSuccess = () => ({\n  type: SHIFT_SUCCESS,\n  payload: null,\n});\n\nexport const login = (user) => ({\n  type: LOGIN,\n  payload: user,\n});\n\nexport const logout = () => ({\n  type: LOGOUT,\n  payload: null,\n});\n"],"sourceRoot":""}